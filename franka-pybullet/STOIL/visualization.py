import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

def Draw_trajectory(init_traj, trajectory):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    x = [point[0] for point in trajectory]
    y = [point[1] for point in trajectory]
    z = [point[2] for point in trajectory]

    ax.scatter(x, y, z, c='red')

    x = [point[0] for point in init_traj]
    y = [point[1] for point in init_traj]
    z = [point[2] for point in init_traj]

    ax.scatter(x, y, z, c='blue')

    ax.set_xlabel('X')
    ax.set_xlabel('Y')
    ax.set_xlabel('Z')

    plt.show()

def Draw_3trajectory(init_traj, trajectory, demonstration):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    x = [point[0] for point in trajectory]
    y = [point[1] for point in trajectory]
    z = [point[2] for point in trajectory]

    ax.scatter(x, y, z, c='red')

    x = [point[0] for point in init_traj]
    y = [point[1] for point in init_traj]
    z = [point[2] for point in init_traj]

    ax.scatter(x, y, z, c='blue')

    x = [point[0] for point in demonstration]
    y = [point[1] for point in demonstration]
    z = [point[2] for point in demonstration]

    ax.scatter(x, y, z, c='green')

    ax.set_xlabel('X')
    ax.set_xlabel('Y')
    ax.set_xlabel('Z')
    ax.set_xlim((-0.2, 0.6))
    ax.set_ylim((-0.2, 0.6))
    ax.set_zlim((0.5, 1.3))

    plt.show()

def Draw_multi_trajectories(init_traj, trajectory_list, demonstration):
    colors = ['#00A1CB', '#FABE28', '#FF5E5E', '#2B3E51', '#8A2BE2', '#76D7EA']
    # labels = ['Trajectory generated by STOMP (Bad)', 'Trajectory generated by STOMP (Good)', 'Trajectory generated by STODI']
    labels = ['MSE in spectrum', 'MSE in power spectrum', 'DTW']

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    for i, trajectory in enumerate(trajectory_list):
        x = [point[0] for point in trajectory]
        y = [point[1] for point in trajectory]
        z = [point[2] for point in trajectory]
        ax.scatter(x, y, z, c=colors[i], label=labels[i])

    x = [point[0] for point in init_traj]
    y = [point[1] for point in init_traj]
    z = [point[2] for point in init_traj]
    # ax.scatter(x, y, z, c='blue')
    ax.scatter(x, y, z, c='#8A2BE2', label='Initial trajectory')

    x = [point[0] for point in demonstration]
    y = [point[1] for point in demonstration]
    z = [point[2] for point in demonstration]
    # ax.scatter(x, y, z, c='green')
    ax.scatter(x, y, z, c='green', label='Demonstration')

    ax.set_xlabel('X')
    ax.set_xlabel('Y')
    ax.set_xlabel('Z')
    ax.set_xlim((-0.2, 0.6))
    ax.set_ylim((-0.2, 0.6))
    ax.set_zlim((0.5, 1.3))
    ax.legend(loc='center right', bbox_to_anchor=(0.0, 0.5), prop={'size':12})

    plt.show()

def Draw_multi_cost(cost_list):
    colors = ['#00A1CB', '#FABE28', '#FF5E5E', '#2B3E51', '#8A2BE2', '#FFC300', '#76D7EA']
    # labels = ['STOMP Optimization (Bad)', "STOMP Optimization (Good)", 'STODI Optimization']
    labels = ['MSE in spectrum', 'MSE in power spectrum', 'DTW']

    x = np.linspace(0, 1, len(cost_list[0]))
    for i, cost in enumerate(cost_list):
        if i == 2:
            plt.plot(x, np.abs(cost) * np.abs(cost) / 128, c=colors[i], linewidth=2, label=labels[i])
            # plt.plot(x, np.abs(cost), c=colors[i], linewidth=2, label=labels[i])
        else:
            plt.plot(x, np.abs(cost), c=colors[i], linewidth=2, label=labels[i])

    plt.xlabel('Optimized processes (%)')
    plt.ylabel('Cost function value')
    plt.legend(loc=1, prop={'size':14})
    # plt.legend(loc=3, prop={'size':14})
    plt.show()